// This file is auto-generated. Do not edit!

#include "precomp.hpp"
#include "opencl_kernels.hpp"

namespace cv
{
namespace ocl
{
namespace stitching
{

const struct ProgramEntry warpers={"warpers",
"__kernel void buildWarpPlaneMaps(__global uchar * xmapptr, int xmap_step, int xmap_offset,\n"
"__global uchar * ymapptr, int ymap_step, int ymap_offset, int rows, int cols,\n"
"__constant float * ck_rinv, __constant float * ct,\n"
"int tl_u, int tl_v, float scale)\n"
"{\n"
"int du = get_global_id(0);\n"
"int dv = get_global_id(1);\n"
"if (du < cols && dv < rows)\n"
"{\n"
"__global float * xmap = (__global float *)(xmapptr + mad24(dv, xmap_step, xmap_offset + du * (int)sizeof(float)));\n"
"__global float * ymap = (__global float *)(ymapptr + mad24(dv, ymap_step, ymap_offset + du * (int)sizeof(float)));\n"
"float u = tl_u + du;\n"
"float v = tl_v + dv;\n"
"float x, y;\n"
"float x_ = u / scale - ct[0];\n"
"float y_ = v / scale - ct[1];\n"
"float z;\n"
"x = ck_rinv[0] * x_ + ck_rinv[1] * y_ + ck_rinv[2] * (1 - ct[2]);\n"
"y = ck_rinv[3] * x_ + ck_rinv[4] * y_ + ck_rinv[5] * (1 - ct[2]);\n"
"z = ck_rinv[6] * x_ + ck_rinv[7] * y_ + ck_rinv[8] * (1 - ct[2]);\n"
"x /= z;\n"
"y /= z;\n"
"xmap[0] = x;\n"
"ymap[0] = y;\n"
"}\n"
"}\n"
"__kernel void buildWarpCylindricalMaps(__global uchar * xmapptr, int xmap_step, int xmap_offset,\n"
"__global uchar * ymapptr, int ymap_step, int ymap_offset, int rows, int cols,\n"
"__constant float * ck_rinv, int tl_u, int tl_v, float scale)\n"
"{\n"
"int du = get_global_id(0);\n"
"int dv = get_global_id(1);\n"
"if (du < cols && dv < rows)\n"
"{\n"
"__global float * xmap = (__global float *)(xmapptr + mad24(dv, xmap_step, xmap_offset + du * (int)sizeof(float)));\n"
"__global float * ymap = (__global float *)(ymapptr + mad24(dv, ymap_step, ymap_offset + du * (int)sizeof(float)));\n"
"float u = tl_u + du;\n"
"float v = tl_v + dv;\n"
"float x, y;\n"
"u /= scale;\n"
"float x_ = sin(u);\n"
"float y_ = v / scale;\n"
"float z_ = cos(u);\n"
"float z;\n"
"x = ck_rinv[0] * x_ + ck_rinv[1] * y_ + ck_rinv[2] * z_;\n"
"y = ck_rinv[3] * x_ + ck_rinv[4] * y_ + ck_rinv[5] * z_;\n"
"z = ck_rinv[6] * x_ + ck_rinv[7] * y_ + ck_rinv[8] * z_;\n"
"if (z > 0) x /= z, y /= z;\n"
"else x = y = -1;\n"
"xmap[0] = x;\n"
"ymap[0] = y;\n"
"}\n"
"}\n"
"__kernel void buildWarpSphericalMaps(__global uchar * xmapptr, int xmap_step, int xmap_offset,\n"
"__global uchar * ymapptr, int ymap_step, int ymap_offset, int rows, int cols,\n"
"__constant float * ck_rinv, int tl_u, int tl_v, float scale)\n"
"{\n"
"int du = get_global_id(0);\n"
"int dv = get_global_id(1);\n"
"if (du < cols && dv < rows)\n"
"{\n"
"__global float * xmap = (__global float *)(xmapptr + mad24(dv, xmap_step, xmap_offset + du * (int)sizeof(float)));\n"
"__global float * ymap = (__global float *)(ymapptr + mad24(dv, ymap_step, ymap_offset + du * (int)sizeof(float)));\n"
"float u = tl_u + du;\n"
"float v = tl_v + dv;\n"
"float x, y;\n"
"v /= scale;\n"
"u /= scale;\n"
"float sinv = sin(v);\n"
"float x_ = sinv * sin(u);\n"
"float y_ = -cos(v);\n"
"float z_ = sinv * cos(u);\n"
"float z;\n"
"x = ck_rinv[0] * x_ + ck_rinv[1] * y_ + ck_rinv[2] * z_;\n"
"y = ck_rinv[3] * x_ + ck_rinv[4] * y_ + ck_rinv[5] * z_;\n"
"z = ck_rinv[6] * x_ + ck_rinv[7] * y_ + ck_rinv[8] * z_;\n"
"if (z > 0) x /= z, y /= z;\n"
"else x = y = -1;\n"
"xmap[0] = x;\n"
"ymap[0] = y;\n"
"}\n"
"}\n"
, "1546fdf0479c8de843df813add086bfd"};
ProgramSource warpers_oclsrc(warpers.programStr);
}
}}
